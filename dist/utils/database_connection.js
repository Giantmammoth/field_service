"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testDatabaseConnection = testDatabaseConnection;
exports.closeDatabaseConnection = closeDatabaseConnection;
exports.isDatabaseAccessible = isDatabaseAccessible;
const prisma_1 = require("./prisma");
const config_1 = require("./config");
/**
 * Teste la connexion √† la base de donn√©es Supabase
 * @returns Promise<boolean> - true si la connexion est r√©ussie
 */
async function testDatabaseConnection() {
    try {
        console.log("üîç Test de connexion √† Supabase...");
        // Test de connexion
        await prisma_1.prisma.$connect();
        console.log("‚úÖ Connexion √† Supabase √©tablie");
        // Test de requ√™te simple
        await prisma_1.prisma.$queryRaw `SELECT 1`;
        console.log("‚úÖ Base de donn√©es accessible");
        return true;
    }
    catch (error) {
        console.error("‚ùå Erreur de connexion √† Supabase:", error.message);
        // Gestion des erreurs sp√©cifiques
        if (error.code === "P1001") {
            console.error("üí° Erreur: Impossible de se connecter au serveur de base de donn√©es");
        }
        else if (error.code === "P1003") {
            console.error("üí° Erreur: Base de donn√©es introuvable");
        }
        else if (error.message?.includes("connect")) {
            console.error("üí° Erreur: Probl√®me de connexion r√©seau");
        }
        console.error("üí° V√©rifiez votre configuration DATABASE_URL dans le fichier .env");
        console.error(`üí° URL actuelle: ${config_1.config.database.url ? "Configur√©e" : "Non configur√©e"}`);
        return false;
    }
}
/**
 * Ferme proprement la connexion √† la base de donn√©es
 */
async function closeDatabaseConnection() {
    try {
        await prisma_1.prisma.$disconnect();
        console.log("‚úÖ Connexion √† la base de donn√©es ferm√©e");
    }
    catch (error) {
        console.error("‚ùå Erreur lors de la fermeture de la connexion:", error);
    }
}
/**
 * V√©rifie si la base de donn√©es est accessible
 * @returns Promise<boolean> - true si accessible
 */
async function isDatabaseAccessible() {
    try {
        await prisma_1.prisma.$queryRaw `SELECT 1`;
        return true;
    }
    catch {
        return false;
    }
}
